/*! For license information please see popup.js.LICENSE.txt */
(()=>{var __webpack_modules__={"./app/popup/index.js":()=>{eval('{const PAGE_COMMAND_REQUEST = "MAGIC_BUYER_PAGE_COMMAND";\n\nconst queryActiveTab = () => {\n  return new Promise((resolve, reject) => {\n    chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {\n      if (chrome.runtime.lastError) {\n        reject(chrome.runtime.lastError);\n        return;\n      }\n      if (!tabs || !tabs.length) {\n        reject(new Error("No active tab"));\n        return;\n      }\n      resolve(tabs[0]);\n    });\n  });\n};\n\nconst sendCommand = async (command, args = {}) => {\n  const tab = await queryActiveTab();\n  return new Promise((resolve, reject) => {\n    chrome.tabs.sendMessage(\n      tab.id,\n      {\n        type: PAGE_COMMAND_REQUEST,\n        payload: { command, args },\n        id: `${Date.now()}-${Math.random()}`,\n      },\n      (response) => {\n        if (chrome.runtime.lastError) {\n          reject(chrome.runtime.lastError);\n          return;\n        }\n        if (!response) {\n          reject(new Error("No response from content script"));\n          return;\n        }\n        if (!response.success) {\n          reject(new Error(response.error || "Command failed"));\n          return;\n        }\n        resolve(response.payload);\n      }\n    );\n  });\n};\n\nconst statusContainer = document.getElementById("status");\nconst logsContainer = document.getElementById("logs");\nconst errorContainer = document.getElementById("error");\nconst categoryContainer = document.getElementById("settings-categories");\nconst filtersContainer = document.getElementById("settings-filters");\nconst settingsNote = document.getElementById("settings-note");\nconst settingsStrip = document.querySelector(".settings-strip");\nconst settingsToggle = document.getElementById("settings-toggle");\n\nlet settingsVisible = false;\n\nconst setSettingsVisibility = (visible) => {\n  settingsVisible = visible;\n  if (settingsStrip) {\n    settingsStrip.hidden = !visible;\n  }\n  if (settingsNote) {\n    settingsNote.hidden = !visible || !settingsNote.textContent;\n  }\n  if (settingsToggle) {\n    settingsToggle.setAttribute("aria-expanded", String(visible));\n    settingsToggle.textContent = visible ? "Hide Settings" : "Settings";\n  }\n  if (visible) {\n    updateSettingsSummary();\n  }\n};\n\nif (settingsToggle) {\n  settingsToggle.addEventListener("click", () => {\n    setSettingsVisibility(!settingsVisible);\n  });\n}\n\n\nconst setError = (message) => {\n  if (!message) {\n    errorContainer.textContent = "";\n    errorContainer.hidden = true;\n    return;\n  }\n  errorContainer.textContent = message;\n  errorContainer.hidden = false;\n};\n\nconst updateStatus = async () => {\n  try {\n    const status = await sendCommand("getStatus");\n    const items = [\n      ["State", status.statusText || "Unknown"],\n      ["Requests", status.requestCount || "0"],\n      ["Coins", status.coins || "0"],\n      ["Profit", status.profit || "0"],\n      ["Won", status.won || "0"],\n      ["Sold", status.sold || "0"],\n      ["Unsold", status.unsold || "0"],\n      ["Available", status.available || "0"],\n      ["Active transfers", status.activeTransfers || "0"],\n      ["Countdown", status.countdown || "00:00:00"],\n    ];\n    statusContainer.innerHTML = items\n      .map(([label, value]) => `<div><strong>${label}:</strong> ${value}</div>`)\n      .join("");\n    setError("");\n  } catch (error) {\n    statusContainer.innerHTML = "";\n    setError(error?.message || "Unable to fetch status");\n  }\n};\n\nconst updateLogs = async () => {\n  try {\n    const { html } = await sendCommand("getLogs");\n    logsContainer.innerHTML = `<ul>${html || ""}</ul>`;\n  } catch (error) {\n    logsContainer.innerHTML = "<em>Unable to load logs.</em>";\n    setError(error?.message || "Unable to load logs");\n  }\n};\n\nconst renderChips = (container, items, active, selectedSet, options = {}) => {\n  if (!container) {\n    return;\n  }\n\n  if (!items || !items.length) {\n    container.innerHTML = "<span class=\'chip empty\'>No data</span>";\n    return;\n  }\n\n  const { type } = options;\n  container.innerHTML = items\n    .map((item) => {\n      const index = typeof item.index === "number" ? item.index : undefined;\n      const label = item.label || item;\n      const isActive =\n        (typeof active === "number" && typeof index === "number" && index === active) ||\n        (typeof active === "string" && label === active);\n      const isSelected = selectedSet?.has?.(label);\n      const classes = ["chip"];\n      if (isActive) {\n        classes.push("active");\n      } else if (isSelected) {\n        classes.push("selected");\n      }\n      const dataAttrs = [];\n      if (typeof index === "number") {\n        dataAttrs.push(`data-index="${index}"`);\n      }\n      if (label) {\n        dataAttrs.push(`data-label="${label}"`);\n      }\n      if (type) {\n        dataAttrs.push(`data-type="${type}"`);\n      }\n      const attributes = dataAttrs.length ? ` ${dataAttrs.join(" ")}` : "";\n      return `<button type="button" class="${classes.join(" ")}"${attributes}>${label}</button>`;\n    })\n    .join("");\n};\n\nconst updateSettingsSummary = async (suppressNote = false) => {\n  if (!categoryContainer || !filtersContainer || !settingsVisible) {\n\n    return;\n  }\n\n  try {\n    const summary = await sendCommand("getSettingsSummary");\n    const categories = summary?.categories || [];\n    const filters = summary?.filters || [];\n    const activeCategory = summary?.activeCategoryIndex ?? 0;\n    const activeFilter = summary?.activeFilter || "";\n    const selectedFilters = new Set(summary?.selectedFilters || []);\n\n    if (activeFilter) {\n      selectedFilters.add(activeFilter);\n    }\n\n    renderChips(categoryContainer, categories, activeCategory, undefined, {\n      type: "category",\n    });\n    renderChips(filtersContainer, filters, activeFilter, selectedFilters, {\n      type: "filter",\n    });\n\n\n    if (settingsNote) {\n      settingsNote.textContent = "";\n      settingsNote.hidden = true;\n    }\n  } catch (error) {\n    console.warn("MagicBuyer popup: unable to load settings summary", error);\n    renderChips(categoryContainer, [], 0);\n    renderChips(filtersContainer, [], 0);\n    if (settingsNote) {\n      if (suppressNote) {\n        settingsNote.textContent = "";\n        settingsNote.hidden = true;\n      } else {\n        settingsNote.textContent =\n          "Open the MagicBuyer tab in the Ultimate Team web app to load settings and filters.";\n        settingsNote.hidden = false;\n      }\n    }\n  }\n};\n\nconst withAction = (fn) => async () => {\n  try {\n    await fn();\n    setError("");\n    await updateStatus();\n    await updateLogs();\n    await updateSettingsSummary(true);\n  } catch (error) {\n    setError(error?.message || "Action failed");\n  }\n};\n\nconst bindButton = (id, handler) => {\n  const el = document.getElementById(id);\n  if (!el) return;\n  el.addEventListener("click", withAction(handler));\n};\n\nbindButton("open", () => sendCommand("open"));\nbindButton("start", () => sendCommand("start"));\nbindButton("resume", () => sendCommand("resume"));\nbindButton("pause", () => sendCommand("pause"));\nbindButton("stop", () => sendCommand("stop"));\nbindButton("clear", () => sendCommand("clearLogs"));\n\nupdateStatus();\nupdateLogs();\nsetInterval(() => {\n  updateStatus();\n  updateLogs();\n  updateSettingsSummary(true);\n}, 5000);\n\nconst handleCategorySelection = async (event) => {\n  const target = event.target.closest(".chip[data-type=\'category\']");\n  if (!target) {\n    return;\n  }\n\n  if (target.classList.contains("active")) {\n    return;\n  }\n\n  const index = Number(target.dataset.index);\n  if (Number.isNaN(index)) {\n    return;\n  }\n\n  target.disabled = true;\n  try {\n    await sendCommand("setActiveSettingsTab", { index });\n    await updateSettingsSummary(true);\n    setError("");\n  } catch (error) {\n    setError(error?.message || "Unable to activate settings");\n  } finally {\n    target.disabled = false;\n  }\n};\n\nif (categoryContainer) {\n  categoryContainer.addEventListener("click", handleCategorySelection);\n}\n\n\n\n//# sourceURL=webpack://MagicBuyer-UT/./app/popup/index.js?\n}')}},__webpack_exports__={};__webpack_modules__["./app/popup/index.js"]()})();